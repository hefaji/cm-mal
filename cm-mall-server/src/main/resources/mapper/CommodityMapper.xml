<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xiaobaidu.mall.dao.CommodityMapper">
  <resultMap id="BaseResultMap" type="com.xiaobaidu.mall.entity.Commodity">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Sep 14 11:30:14 CST 2017.
    -->
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="code" jdbcType="VARCHAR" property="code" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="hot" jdbcType="INTEGER" property="hot" />
    <result column="price" jdbcType="DECIMAL" property="price" />
    <result column="sell_price" jdbcType="DECIMAL" property="sellPrice" />
    <result column="price_unit" jdbcType="VARCHAR" property="priceUnit" />
    <result column="introduce" jdbcType="LONGVARCHAR" property="introduce" />
    <result column="stock" jdbcType="VARCHAR" property="stock" />
    <result column="type_id" jdbcType="VARCHAR"  property="typeId"/>
    <result column="type_name" jdbcType="VARCHAR" property="typeName" />
    <result column="big_image" jdbcType="VARCHAR" property="bigImage" />
    <result column="middle_image" jdbcType="VARCHAR" property="middleImage" />
    <result column="small_image" jdbcType="VARCHAR" property="smallImage" />
    <result column="icon" jdbcType="VARCHAR" property="icon" />

  </resultMap>

  <sql id="base_column">

    comm.id as id ,
    comm.code as code ,
    comm.name as name ,
    comm.hot as hot ,
    comm.price as price ,
    comm.price_unit as price_unit,
    comm.sell_price as sell_price ,
    comm.introduce as introduce ,
    type.id as type_id,
    type.name as type_name,
    comm.code as comm_code,
    image.big_image as big_image,
    image.middle_image as middle_image,
    image.small_image as small_image,
    image.icon as icon,
    (CASE WHEN s.stock  is null THEN 0 ELSE s.stock END )as stock

  </sql>

  <update id="updateByPrimaryKey" parameterType="com.xiaobaidu.mall.entity.Commodity">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Sep 14 11:30:14 CST 2017.
    -->
    update commodity
    set code = #{code,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      hot = #{hot,jdbcType=INTEGER},
      price = #{price,jdbcType=DECIMAL},
      sell_price = #{sellPrice,jdbcType=DECIMAL},
      price_unit = #{priceUnit,jdbcType=VARCHAR},
      type_id = #{typeId,jdbcType=VARCHAR},
      creator = #{creator,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      introduce = #{introduce,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=VARCHAR}
  </update>


  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
     <include refid="base_column"/>
    from commodity comm
    LEFT JOIN comm_images image on comm.code = image.comm_code
    LEFT JOIN comm_type type on comm.type_id = type.id
    LEFT JOIN (SELECT comm_code , SUM(count) as stock from comm_stock GROUP BY comm_code) s on s.comm_code = comm.code
    where comm.id = #{id,jdbcType=VARCHAR}
  </select>


  <select id="getHotCommodity" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="base_column"/>
    from commodity comm
    LEFT JOIN comm_images image on comm.code = image.comm_code
    LEFT JOIN comm_type type on comm.type_id = type.id
    LEFT JOIN (SELECT comm_code , SUM(count) as stock from comm_stock GROUP BY comm_code) s on s.comm_code = comm.code
    where comm.hot = 1  AND enable=1 ORDER by comm.pos ASC
  </select>

  <!--根据类型获取热销商品(0非热销，1热销)-->
  <select id="getHotSellByTypeId" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="base_column"/>
    from commodity comm
    LEFT JOIN comm_images image on comm.code = image.comm_code
    LEFT JOIN comm_type type on comm.type_id = type.id
    LEFT JOIN (SELECT comm_code , SUM(count) as stock from comm_stock GROUP BY comm_code) s on s.comm_code = comm.code
    where comm.type_id=#{typeId,jdbcType=VARCHAR} and comm.hot_sell=1 AND enable=1 ORDER by comm.pos ASC
  </select>

  <!--根据类型获取商品，过滤热销商品(0非热销，1热销)-->
  <select id="getByTypeId" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="base_column"/>
    from commodity comm
    LEFT JOIN comm_images image on comm.code = image.comm_code
    LEFT JOIN comm_type type on comm.type_id = type.id
    LEFT JOIN (SELECT comm_code , SUM(count) as stock from comm_stock GROUP BY comm_code) s on s.comm_code = comm.code
    where comm.type_id=#{typeId,jdbcType=VARCHAR} and comm.hot_sell=0 AND enable=1 ORDER by comm.pos ASC
  </select>

  <select id="getCommodityByCode" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="base_column"/>
    from commodity comm
    LEFT JOIN comm_images image on comm.code = image.comm_code
    LEFT JOIN comm_type type on comm.type_id = type.id
    LEFT JOIN (SELECT comm_code , SUM(count) as stock from comm_stock GROUP BY comm_code) s on s.comm_code = comm.code
    where comm.code = #{code,jdbcType=VARCHAR}
  </select>

  <select id="getCommodityById" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="base_column"/>
    from commodity comm
    LEFT JOIN comm_images image on comm.code = image.comm_code
    LEFT JOIN comm_type type on comm.type_id = type.id
    LEFT JOIN (SELECT comm_code , SUM(count) as stock from comm_stock GROUP BY comm_code) s on s.comm_code = comm.code
    where comm.id = #{id,jdbcType=VARCHAR}
  </select>

  <select id="searchByKeyword" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="base_column"/>
    from commodity comm
    LEFT JOIN comm_images image on comm.code = image.comm_code
    LEFT JOIN comm_type type on comm.type_id = type.id
    LEFT JOIN (SELECT comm_code , SUM(count) as stock from comm_stock GROUP BY comm_code) s on s.comm_code = comm.code
    where comm.code LIKE CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
     or comm.introduce  LIKE CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
     or comm.type_id in (select id from comm_type where name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%'));
  </select>


</mapper>